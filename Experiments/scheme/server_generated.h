// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVER_MY_PROJECT_SERVER_H_
#define FLATBUFFERS_GENERATED_SERVER_MY_PROJECT_SERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "client_generated.h"

namespace my_project {
namespace server {

struct Response;
struct ResponseBuilder;

struct Response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXTRA_INFO = 4,
    VT_DATA = 6
  };
  const ::flatbuffers::String *extra_info() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTRA_INFO);
  }
  const my_project::client::Response *data() const {
    return GetPointer<const my_project::client::Response *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EXTRA_INFO) &&
           verifier.VerifyString(extra_info()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  typedef Response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_extra_info(::flatbuffers::Offset<::flatbuffers::String> extra_info) {
    fbb_.AddOffset(Response::VT_EXTRA_INFO, extra_info);
  }
  void add_data(::flatbuffers::Offset<my_project::client::Response> data) {
    fbb_.AddOffset(Response::VT_DATA, data);
  }
  explicit ResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Response> CreateResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> extra_info = 0,
    ::flatbuffers::Offset<my_project::client::Response> data = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_extra_info(extra_info);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Response> CreateResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *extra_info = nullptr,
    ::flatbuffers::Offset<my_project::client::Response> data = 0) {
  auto extra_info__ = extra_info ? _fbb.CreateString(extra_info) : 0;
  return my_project::server::CreateResponse(
      _fbb,
      extra_info__,
      data);
}

}  // namespace server
}  // namespace my_project

#endif  // FLATBUFFERS_GENERATED_SERVER_MY_PROJECT_SERVER_H_
