// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_MY_PROJECT_CLIENT_H_
#define FLATBUFFERS_GENERATED_CLIENT_MY_PROJECT_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace my_project {
namespace client {

struct Request;
struct RequestBuilder;

struct Response;
struct ResponseBuilder;

struct Message;
struct MessageBuilder;

enum CommonMessage : uint8_t {
  CommonMessage_NONE = 0,
  CommonMessage_Request = 1,
  CommonMessage_Response = 2,
  CommonMessage_MIN = CommonMessage_NONE,
  CommonMessage_MAX = CommonMessage_Response
};

inline const CommonMessage (&EnumValuesCommonMessage())[3] {
  static const CommonMessage values[] = {
    CommonMessage_NONE,
    CommonMessage_Request,
    CommonMessage_Response
  };
  return values;
}

inline const char * const *EnumNamesCommonMessage() {
  static const char * const names[4] = {
    "NONE",
    "Request",
    "Response",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommonMessage(CommonMessage e) {
  if (::flatbuffers::IsOutRange(e, CommonMessage_NONE, CommonMessage_Response)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCommonMessage()[index];
}

template<typename T> struct CommonMessageTraits {
  static const CommonMessage enum_value = CommonMessage_NONE;
};

template<> struct CommonMessageTraits<my_project::client::Request> {
  static const CommonMessage enum_value = CommonMessage_Request;
};

template<> struct CommonMessageTraits<my_project::client::Response> {
  static const CommonMessage enum_value = CommonMessage_Response;
};

bool VerifyCommonMessage(::flatbuffers::Verifier &verifier, const void *obj, CommonMessage type);
bool VerifyCommonMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Request::VT_NAME, name);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Request> CreateRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return my_project::client::CreateRequest(
      _fbb,
      name__);
}

struct Response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int32_t z() const {
    return GetField<int32_t>(VT_Z, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  typedef Response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Response::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Response::VT_Y, y, 0);
  }
  void add_z(int32_t z) {
    fbb_.AddElement<int32_t>(Response::VT_Z, z, 0);
  }
  explicit ResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Response> CreateResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t z = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT_TYPE = 4,
    VT_CONTENT = 6
  };
  my_project::client::CommonMessage content_type() const {
    return static_cast<my_project::client::CommonMessage>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const my_project::client::Request *content_as_Request() const {
    return content_type() == my_project::client::CommonMessage_Request ? static_cast<const my_project::client::Request *>(content()) : nullptr;
  }
  const my_project::client::Response *content_as_Response() const {
    return content_type() == my_project::client::CommonMessage_Response ? static_cast<const my_project::client::Response *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyCommonMessage(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const my_project::client::Request *Message::content_as<my_project::client::Request>() const {
  return content_as_Request();
}

template<> inline const my_project::client::Response *Message::content_as<my_project::client::Response>() const {
  return content_as_Response();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_content_type(my_project::client::CommonMessage content_type) {
    fbb_.AddElement<uint8_t>(Message::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(Message::VT_CONTENT, content);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    my_project::client::CommonMessage content_type = my_project::client::CommonMessage_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyCommonMessage(::flatbuffers::Verifier &verifier, const void *obj, CommonMessage type) {
  switch (type) {
    case CommonMessage_NONE: {
      return true;
    }
    case CommonMessage_Request: {
      auto ptr = reinterpret_cast<const my_project::client::Request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case CommonMessage_Response: {
      auto ptr = reinterpret_cast<const my_project::client::Response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCommonMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCommonMessage(
        verifier,  values->Get(i), types->GetEnum<CommonMessage>(i))) {
      return false;
    }
  }
  return true;
}

inline const my_project::client::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<my_project::client::Message>(buf);
}

inline const my_project::client::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<my_project::client::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<my_project::client::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<my_project::client::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<my_project::client::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<my_project::client::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace client
}  // namespace my_project

#endif  // FLATBUFFERS_GENERATED_CLIENT_MY_PROJECT_CLIENT_H_
